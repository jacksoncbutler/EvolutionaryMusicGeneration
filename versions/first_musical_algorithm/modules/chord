from note import Note


class Chord:
    translate = {'R':'R', 'P':'P', 'L':'L', 'N':'RP'}

    def __init__(self, notes:tuple=(1,3,5), flats:tuple=(False, False, False), mod:str='M'):

        self.operations = []
        self.notes      = [Note(notes[0], flats[0]), Note(notes[1], flats[1]), Note(notes[2], flats[2])]
        self.mod        = mod

    def fill_operations(self, transitions:list):
        for item in transitions:
            self.operations.append([i for i in Chord.translate[item]])
            print(self.operations)
    
    def perform_operations(self):
        for item in self.operations:
            if item == 'R':
                self.R()
            elif item == 'P':
                self.P()
            elif item == 'L':
                self.L()
            else:
                raise ValueError("Invalid tranformation in class Chord")
            print(self.notes)
            
    def shift(self, direction:int):
        """
        direction == -1 for 0->1 | 1 for 0->2
        """

        holdVar = None
        for num in range(len(self.notes)):
            holdVar = self.notes[num]
            index = 0 if ((num + direction) == len(self.notes)) else num + direction
            self.notes[num] = self.notes[index]

    
    def L(self):
        if self.mod == 'M':
            self.notes[0].flat(1)
            self.shift(0)
            self.mod = 'm'
        else:
            self.notes[2].sharp(1)
            self.shift(1)
            self.mod('M')

    def R(self):
        if self.mod == 'M':
            self.notes[2].sharp(2)
            self.shift(1)
            self.mod = 'm'
        else:
            self.notes[2].flat(2)
            self.shift(0)
            self.mod('M')

    def P(self):
        if self.mod == 'M':
            self.notes[1].flat(1)
            self.mod = 'm'
        else:
            self.notes[1].sharp(1)
            self.mod('M')

    def __str__(self):
        return f'{self.notes}, {self.mod}'



if __name__ == '__main__':
    chord = Chord()
    chord.fill_operations(['P', 'R',])
    print(chord.operations)
    chord.perform_operations()


